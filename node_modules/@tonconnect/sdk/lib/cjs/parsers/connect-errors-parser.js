"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectErrorsParser = void 0;
const errors_1 = require("../errors");
const manifest_content_error_error_1 = require("../errors/protocol/events/connect/manifest-content-error.error");
const manifest_not_found_error_1 = require("../errors/protocol/events/connect/manifest-not-found.error");
const unknown_error_1 = require("../errors/unknown.error");
const protocol_1 = require("@tonconnect/protocol");
const connectEventErrorsCodes = {
    [protocol_1.CONNECT_EVENT_ERROR_CODES.UNKNOWN_ERROR]: unknown_error_1.UnknownError,
    [protocol_1.CONNECT_EVENT_ERROR_CODES.USER_REJECTS_ERROR]: errors_1.UserRejectsError,
    [protocol_1.CONNECT_EVENT_ERROR_CODES.BAD_REQUEST_ERROR]: errors_1.BadRequestError,
    [protocol_1.CONNECT_EVENT_ERROR_CODES.UNKNOWN_APP_ERROR]: errors_1.UnknownAppError,
    [protocol_1.CONNECT_EVENT_ERROR_CODES.MANIFEST_NOT_FOUND_ERROR]: manifest_not_found_error_1.ManifestNotFoundError,
    [protocol_1.CONNECT_EVENT_ERROR_CODES.MANIFEST_CONTENT_ERROR]: manifest_content_error_error_1.ManifestContentErrorError
};
class ConnectErrorsParser {
    parseError(error) {
        let ErrorConstructor = unknown_error_1.UnknownError;
        if (error.code in connectEventErrorsCodes) {
            ErrorConstructor = connectEventErrorsCodes[error.code] || unknown_error_1.UnknownError;
        }
        return new ErrorConstructor(error.message);
    }
}
exports.connectErrorsParser = new ConnectErrorsParser();
//# sourceMappingURL=connect-errors-parser.js.map