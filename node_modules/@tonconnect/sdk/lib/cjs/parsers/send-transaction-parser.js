"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTransactionParser = void 0;
const protocol_1 = require("@tonconnect/protocol");
const errors_1 = require("../errors");
const unknown_error_1 = require("../errors/unknown.error");
const rpc_parser_1 = require("./rpc-parser");
const sendTransactionErrors = {
    [protocol_1.SEND_TRANSACTION_ERROR_CODES.UNKNOWN_ERROR]: unknown_error_1.UnknownError,
    [protocol_1.SEND_TRANSACTION_ERROR_CODES.USER_REJECTS_ERROR]: errors_1.UserRejectsError,
    [protocol_1.SEND_TRANSACTION_ERROR_CODES.BAD_REQUEST_ERROR]: errors_1.BadRequestError,
    [protocol_1.SEND_TRANSACTION_ERROR_CODES.UNKNOWN_APP_ERROR]: errors_1.UnknownAppError
};
class SendTransactionParser extends rpc_parser_1.RpcParser {
    convertToRpcRequest(request) {
        return {
            method: 'sendTransaction',
            params: [JSON.stringify(request)]
        };
    }
    parseAndThrowError(response) {
        let ErrorConstructor = unknown_error_1.UnknownError;
        if (response.error.code in sendTransactionErrors) {
            ErrorConstructor = sendTransactionErrors[response.error.code] || unknown_error_1.UnknownError;
        }
        throw new ErrorConstructor(response.error.message);
    }
    convertFromRpcResponse(rpcResponse) {
        return {
            boc: rpcResponse.result
        };
    }
}
exports.sendTransactionParser = new SendTransactionParser();
//# sourceMappingURL=send-transaction-parser.js.map