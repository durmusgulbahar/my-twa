import { AppRequest, ConnectRequest, RpcMethod, WalletEvent, WalletResponse } from '@tonconnect/protocol';
import { WalletConnectionSourceHTTP } from "../../models/wallet/wallet-connection-source";
import { HTTPProvider } from "../provider";
import { IStorage } from "../../storage/models/storage.interface";
import { WithoutId } from "../../utils/types";
export declare class BridgeProvider implements HTTPProvider {
    private readonly storage;
    private readonly walletConnectionSource;
    static fromStorage(storage: IStorage): Promise<BridgeProvider>;
    readonly type = "http";
    private readonly connectionStorage;
    private readonly pendingRequests;
    private nextRequestId;
    private session;
    private bridge;
    private listeners;
    constructor(storage: IStorage, walletConnectionSource: WalletConnectionSourceHTTP);
    connect(message: ConnectRequest): string;
    restoreConnection(): Promise<void>;
    sendRequest<T extends RpcMethod>(request: WithoutId<AppRequest<T>>): Promise<WithoutId<WalletResponse<T>>>;
    closeConnection(): void;
    disconnect(): Promise<void>;
    listen(callback: (e: WalletEvent) => void): () => void;
    private gatewayListener;
    private gatewayErrorsListener;
    private updateSession;
    private removeBridgeAndSession;
    private generateUniversalLink;
}
