import { AppRequest, RpcMethod, WalletResponse, ConnectRequest, WalletEvent } from '@tonconnect/protocol';
import { InternalProvider } from "../provider";
import { IStorage } from "../../storage/models/storage.interface";
import { WithoutId } from "../../utils/types";
export declare class InjectedProvider<T extends string = string> implements InternalProvider {
    private readonly injectedWalletKey;
    private static window;
    static fromStorage(storage: IStorage): Promise<InjectedProvider>;
    static isWalletInjected(injectedWalletKey: string): boolean;
    static isInsideWalletBrowser(injectedWalletKey: string): boolean;
    private static isWindowContainsWallet;
    readonly type = "injected";
    private unsubscribeCallback;
    private injectedWallet;
    private readonly connectionStorage;
    private listenSubscriptions;
    private listeners;
    constructor(storage: IStorage, injectedWalletKey: T);
    connect(message: ConnectRequest): void;
    restoreConnection(): Promise<void>;
    closeConnection(): void;
    disconnect(): Promise<void>;
    private closeAllListeners;
    listen(eventsCallback: (e: WalletEvent) => void): () => void;
    sendRequest<T extends RpcMethod>(request: WithoutId<AppRequest<T>>): Promise<WithoutId<WalletResponse<T>>>;
    private _connect;
    private makeSubscriptions;
    private updateSession;
}
